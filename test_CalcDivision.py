# ********RoostGPT********
"""
Test generated by RoostGPT for test pushTest using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=division_531bd48a9c
ROOST_METHOD_SIG_HASH=division_eae366bb2d

Scenario 1: Division of two positive numbers
Details:
  TestName: test_division_of_positive_numbers
  Description: This test is intended to verify the correctness of the division operation when both the inputs are positive numbers.
Execution:
  Arrange: Initialize two positive numbers, num1 and num2.
  Act: Invoke the function division with num1 and num2 as parameters.
  Assert: Check that the returned value is equal to the division of num1 by num2.
Validation:
  Rationalizing this test is important to ensure that the function correctly handles the division of positive numbers, which is a common use case.

Scenario 2: Division of two negative numbers
Details:
  TestName: test_division_of_negative_numbers
  Description: This test is intended to verify the correctness of the division operation when both the inputs are negative numbers.
Execution:
  Arrange: Initialize two negative numbers, num1 and num2.
  Act: Invoke the function division with num1 and num2 as parameters.
  Assert: Check that the returned value is equal to the division of num1 by num2.
Validation:
  Rationalizing this test is important to ensure that the function correctly handles the division of negative numbers, which is a common use case.

Scenario 3: Division by zero
Details:
  TestName: test_division_by_zero
  Description: This test is intended to verify the function's behavior when the second parameter is zero.
Execution:
  Arrange: Initialize two numbers, num1 and num2, with num2 being zero.
  Act: Invoke the function division with num1 and num2 as parameters.
  Assert: Check that the returned value is the string "Cannot divide by zero".
Validation:
  Rationalizing this test is important to ensure that the function correctly handles division by zero, as this is an edge case that needs to be handled properly to avoid exceptions.

Scenario 4: Division of zero by any number
Details:
  TestName: test_zero_divided_by_number
  Description: This test is intended to verify the function's behavior when the first parameter is zero and the second is any non-zero number.
Execution:
  Arrange: Initialize two numbers, num1 and num2, with num1 being zero.
  Act: Invoke the function division with num1 and num2 as parameters.
  Assert: Check that the returned value is zero.
Validation:
  Rationalizing this test is important to ensure that the function correctly handles the case where zero is divided by any number, as this is another common use case.

Scenario 5: Division of a number by itself
Details:
  TestName: test_number_divided_by_itself
  Description: This test is intended to verify the function's behavior when both parameters are the same non-zero number.
Execution:
  Arrange: Initialize two numbers, num1 and num2, with both being the same non-zero number.
  Act: Invoke the function division with num1 and num2 as parameters.
  Assert: Check that the returned value is one.
Validation:
  Rationalizing this test is important to ensure that the function correctly handles the case where a number is divided by itself, as this is another common use case.
"""

# ********RoostGPT********
import pytest
from calc import division

class Test_CalcDivision:
    @pytest.mark.regression
    def test_division_of_positive_numbers(self):
        num1, num2 = 10, 5
        result = division(num1, num2)
        assert result == 2, "Result should be the division of two positive numbers"

    @pytest.mark.regression
    def test_division_of_negative_numbers(self):
        num1, num2 = -10, -5
        result = division(num1, num2)
        assert result == 2, "Result should be the division of two negative numbers"

    @pytest.mark.smoke
    def test_division_by_zero(self):
        num1, num2 = 10, 0
        result = division(num1, num2)
        assert result == "Cannot divide by zero", "Result should be 'Cannot divide by zero' when dividing by zero"

    @pytest.mark.smoke
    def test_zero_divided_by_number(self):
        num1, num2 = 0, 5
        result = division(num1, num2)
        assert result == 0, "Result should be zero when zero is divided by any number"

    @pytest.mark.regression
    def test_number_divided_by_itself(self):
        num1, num2 = 5, 5
        result = division(num1, num2)
        assert result == 1, "Result should be one when a number is divided by itself"
