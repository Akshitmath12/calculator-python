# ********RoostGPT********
"""
Test generated by RoostGPT for test pushTest using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=multiplication_b85031f6ad
ROOST_METHOD_SIG_HASH=multiplication_c14ad406cb

Scenario 1: Verify multiplication of two positive numbers
Details:
  TestName: test_multiplication_positive_numbers
  Description: The test is intended to verify the multiplication of two positive numbers.
Execution:
  Arrange: Initialize two positive numbers num1 and num2.
  Act: Call the multiplication function with num1 and num2 as parameters.
  Assert: Check if the returned value is the product of num1 and num2.
Validation:
  The importance of the test is to ensure that the function correctly multiplies two positive numbers. The expected result is the product of the two numbers which is in line with the function's specifications.

Scenario 2: Verify multiplication of two negative numbers
Details:
  TestName: test_multiplication_negative_numbers
  Description: The test is intended to verify the multiplication of two negative numbers.
Execution:
  Arrange: Initialize two negative numbers num1 and num2.
  Act: Call the multiplication function with num1 and num2 as parameters.
  Assert: Check if the returned value is the product of num1 and num2.
Validation:
  The test is important to ensure that the function correctly multiplies two negative numbers. The expected result is the product of the two numbers which is in line with the function's specifications.

Scenario 3: Verify multiplication of a positive and a negative number
Details:
  TestName: test_multiplication_positive_negative_numbers
  Description: The test is intended to verify the multiplication of a positive and a negative number.
Execution:
  Arrange: Initialize a positive number num1 and a negative number num2.
  Act: Call the multiplication function with num1 and num2 as parameters.
  Assert: Check if the returned value is the product of num1 and num2.
Validation:
  The test is important to ensure that the function correctly multiplies a positive and a negative number. The expected result is the product of the two numbers which is in line with the function's specifications.

Scenario 4: Verify multiplication of a number and zero
Details:
  TestName: test_multiplication_zero
  Description: The test is intended to verify the multiplication of a number and zero.
Execution:
  Arrange: Initialize a number num1 and zero.
  Act: Call the multiplication function with num1 and zero as parameters.
  Assert: Check if the returned value is zero.
Validation:
  The test is important to ensure that the function correctly returns zero when a number is multiplied by zero. This is in line with the mathematical principle and the function's specifications.
"""

# ********RoostGPT********
import pytest
from calc import multiplication

class Test_CalcMultiplication:
    
    @pytest.mark.positive
    def test_multiplication_positive_numbers(self):
        num1 = 10
        num2 = 2
        result = multiplication(num1, num2)
        assert result == 20, "Multiplication of two positive numbers failed"
    
    @pytest.mark.negative
    def test_multiplication_negative_numbers(self):
        num1 = -10
        num2 = -2
        result = multiplication(num1, num2)
        assert result == 20, "Multiplication of two negative numbers failed"
    
    @pytest.mark.mixed
    def test_multiplication_positive_negative_numbers(self):
        num1 = -10
        num2 = 2
        result = multiplication(num1, num2)
        assert result == -20, "Multiplication of a positive and a negative number failed"
    
    @pytest.mark.zero
    def test_multiplication_zero(self):
        num1 = 10
        num2 = 0
        result = multiplication(num1, num2)
        assert result == 0, "Multiplication of a number and zero failed"
