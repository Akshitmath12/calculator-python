# ********RoostGPT********
"""
Test generated by RoostGPT for test pushTest using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=multiplication_ba1869a1c0
ROOST_METHOD_SIG_HASH=multiplication_c14ad406cb

```
Scenario 1: Validate the multiplication of two positive numbers
Details:
  TestName: test_multiplication_of_two_positive_numbers
  Description: This test is intended to verify that the function correctly multiplies two positive numbers.
Execution:
  Arrange: No particular arrangement is needed as the function does not depend on any global or external state.
  Act: Invoke the multiplication function with two positive numbers as parameters.
  Assert: Check that the returned value is the expected multiplication of the two numbers.
Validation:
  The multiplication of two positive numbers should always result in a positive number. This test verifies that the function correctly implements this basic mathematical principle.

Scenario 2: Validate the multiplication of two negative numbers
Details:
  TestName: test_multiplication_of_two_negative_numbers
  Description: This test is intended to verify that the function correctly multiplies two negative numbers.
Execution:
  Arrange: No particular arrangement is needed as the function does not depend on any global or external state.
  Act: Invoke the multiplication function with two negative numbers as parameters.
  Assert: Check that the returned value is the expected multiplication of the two numbers.
Validation:
  The multiplication of two negative numbers should always result in a positive number. This test verifies that the function correctly implements this basic mathematical principle.

Scenario 3: Validate the multiplication of a positive number and a negative number
Details:
  TestName: test_multiplication_of_positive_and_negative_number
  Description: This test is intended to verify that the function correctly multiplies a positive number and a negative number.
Execution:
  Arrange: No particular arrangement is needed as the function does not depend on any global or external state.
  Act: Invoke the multiplication function with a positive number and a negative number as parameters.
  Assert: Check that the returned value is the expected multiplication of the two numbers.
Validation:
  The multiplication of a positive number and a negative number should always result in a negative number. This test verifies that the function correctly implements this basic mathematical principle.

Scenario 4: Validate the multiplication of a number by zero
Details:
  TestName: test_multiplication_by_zero
  Description: This test is intended to verify that the function correctly multiplies a number by zero.
Execution:
  Arrange: No particular arrangement is needed as the function does not depend on any global or external state.
  Act: Invoke the multiplication function with a nonzero number and zero as parameters.
  Assert: Check that the returned value is zero.
Validation:
  The multiplication of any number by zero should always result in zero. This test verifies that the function correctly implements this basic mathematical principle.
```
"""

# ********RoostGPT********
import pytest
from calc import multiplication

class Test_Multiplication:

    @pytest.mark.positive
    def test_multiplication_of_two_positive_numbers(self):
        num1, num2 = 5, 4
        result = multiplication(num1, num2)
        assert result == 20, f"Expected {num1*num2}, but got {result}"

    @pytest.mark.positive
    def test_multiplication_of_two_negative_numbers(self):
        num1, num2 = -5, -4
        result = multiplication(num1, num2)
        assert result == 20, f"Expected {num1*num2}, but got {result}"

    @pytest.mark.negative
    def test_multiplication_of_positive_and_negative_number(self):
        num1, num2 = 5, -4
        result = multiplication(num1, num2)
        assert result == -20, f"Expected {num1*num2}, but got {result}"

    @pytest.mark.zero
    def test_multiplication_by_zero(self):
        num1, num2 = 5, 0
        result = multiplication(num1, num2)
        assert result == 0, f"Expected {num1*num2}, but got {result}"
