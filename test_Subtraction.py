# ********RoostGPT********
"""
Test generated by RoostGPT for test pushTest using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=subtraction_b6b79578ff
ROOST_METHOD_SIG_HASH=subtraction_c085e74db2

```
Scenario 1: Testing the Subtraction of Two Positive Integers
Details:
  TestName: test_subtraction_positive_integers
  Description: This test is intended to verify the correct subtraction of two positive integers.
Execution:
  Arrange: Initialize two positive integers, num1 and num2.
  Act: Invoke the subtraction function with num1 and num2 as parameters.
  Assert: The expected outcome is the difference between num1 and num2. This will be checked by comparing the output of the subtraction function with this expected difference.
Validation:
  This test is important as it verifies the most basic functionality of the subtraction function. The expected result matches the function's specification of returning the difference between the two input numbers.

Scenario 2: Testing the Subtraction of Two Negative Integers
Details:
  TestName: test_subtraction_negative_integers
  Description: This test is intended to verify the correct subtraction of two negative integers.
Execution:
  Arrange: Initialize two negative integers, num1 and num2.
  Act: Invoke the subtraction function with num1 and num2 as parameters.
  Assert: The expected outcome is the difference between num1 and num2. This will be checked by comparing the output of the subtraction function with this expected difference.
Validation:
  This test is important as it ensures that the subtraction function handles negative integers correctly. The expected result matches the function's specification of returning the difference between the two input numbers.

Scenario 3: Testing the Subtraction of a Positive and a Negative Integer
Details:
  TestName: test_subtraction_positive_negative_integers
  Description: This test is intended to verify the correct subtraction of a positive integer and a negative integer.
Execution:
  Arrange: Initialize a positive integer, num1, and a negative integer, num2.
  Act: Invoke the subtraction function with num1 and num2 as parameters.
  Assert: The expected outcome is the difference between num1 and num2. This will be checked by comparing the output of the subtraction function with this expected difference.
Validation:
  This test is important as it checks the subtraction function's ability to handle a mix of positive and negative integers. The expected result matches the function's specification of returning the difference between the two input numbers.

Scenario 4: Testing the Subtraction of Zero and an Integer
Details:
  TestName: test_subtraction_zero_integer
  Description: This test is intended to verify the correct subtraction of zero and an integer.
Execution:
  Arrange: Initialize zero, num1, and an integer, num2.
  Act: Invoke the subtraction function with num1 (zero) and num2 as parameters.
  Assert: The expected outcome is the difference between num1 (zero) and num2. This will be checked by comparing the output of the subtraction function with this expected difference.
Validation:
  This test is important as it checks the subtraction function's ability to handle zero as one of the inputs. The expected result matches the function's specification of returning the difference between the two input numbers.
```
"""

# ********RoostGPT********
import pytest
from calc import subtraction

class Test_Subtraction:

    @pytest.mark.positive
    def test_subtraction_positive_integers(self):
        # Arrange
        num1 = 10
        num2 = 5
        expected_result = 5

        # Act
        result = subtraction(num1, num2)

        # Assert
        assert result == expected_result, f'Expected {expected_result}, but got {result}'

    @pytest.mark.negative
    def test_subtraction_negative_integers(self):
        # Arrange
        num1 = -10
        num2 = -5
        expected_result = -5

        # Act
        result = subtraction(num1, num2)

        # Assert
        assert result == expected_result, f'Expected {expected_result}, but got {result}'

    @pytest.mark.mix
    def test_subtraction_positive_negative_integers(self):
        # Arrange
        num1 = 10
        num2 = -5
        expected_result = 15

        # Act
        result = subtraction(num1, num2)

        # Assert
        assert result == expected_result, f'Expected {expected_result}, but got {result}'

    @pytest.mark.zero
    def test_subtraction_zero_integer(self):
        # Arrange
        num1 = 0
        num2 = 5
        expected_result = -5

        # Act
        result = subtraction(num1, num2)

        # Assert
        assert result == expected_result, f'Expected {expected_result}, but got {result}'
