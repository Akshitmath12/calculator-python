# ********RoostGPT********
"""
Test generated by RoostGPT for test pushTest using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=calculator_9ebd2df6b3
ROOST_METHOD_SIG_HASH=calculator_ad84dc0779

Scenario 1: Testing Addition Operation
Details:
  TestName: test_calculator_addition
  Description: This test is intended to verify that the calculator function correctly directs to the addition function when '+' operation is requested.
Execution:
  Arrange: Initialize two numbers and operation as '+'.
  Act: Invoke the calculator function with the initialized numbers and operation.
  Assert: Check that the return value of the calculator function is the correct sum of the two numbers.
Validation:
  This test ensures that the calculator function correctly handles addition operation requests. The correct sum of the two numbers is crucial to the function's specifications and business requirements.

Scenario 2: Testing Subtraction Operation
Details:
  TestName: test_calculator_subtraction
  Description: This test is intended to verify that the calculator function correctly directs to the subtraction function when '-' operation is requested.
Execution:
  Arrange: Initialize two numbers and operation as '-'.
  Act: Invoke the calculator function with the initialized numbers and operation.
  Assert: Check that the return value of the calculator function is the correct difference of the two numbers.
Validation:
  This test ensures that the calculator function correctly handles subtraction operation requests. The correct difference of the two numbers is crucial to the function's specifications and business requirements.

Scenario 3: Testing Multiplication Operation
Details:
  TestName: test_calculator_multiplication
  Description: This test is intended to verify that the calculator function correctly directs to the multiplication function when '*' operation is requested.
Execution:
  Arrange: Initialize two numbers and operation as '*'.
  Act: Invoke the calculator function with the initialized numbers and operation.
  Assert: Check that the return value of the calculator function is the correct product of the two numbers.
Validation:
  This test ensures that the calculator function correctly handles multiplication operation requests. The correct product of the two numbers is crucial to the function's specifications and business requirements.

Scenario 4: Testing Division Operation
Details:
  TestName: test_calculator_division
  Description: This test is intended to verify that the calculator function correctly directs to the division function when '/' operation is requested.
Execution:
  Arrange: Initialize two numbers and operation as '/'.
  Act: Invoke the calculator function with the initialized numbers and operation.
  Assert: Check that the return value of the calculator function is the correct quotient of the two numbers.
Validation:
  This test ensures that the calculator function correctly handles division operation requests. The correct quotient of the two numbers is crucial to the function's specifications and business requirements.

Scenario 5: Testing Invalid Operation
Details:
  TestName: test_calculator_invalid_operation
  Description: This test is intended to verify that the calculator function returns "Invalid operation" when an invalid operation is requested.
Execution:
  Arrange: Initialize two numbers and an invalid operation.
  Act: Invoke the calculator function with the initialized numbers and invalid operation.
  Assert: Check that the return value of the calculator function is "Invalid operation".
Validation:
  This test ensures that the calculator function correctly handles invalid operation requests. The return of "Invalid operation" for invalid operations is crucial to the function's specifications and business requirements.
"""

# ********RoostGPT********
import pytest
from calc import calculator

class Test_CalcCalculator:
    @pytest.mark.regression
    def test_calculator_addition(self):
        num1 = 10
        num2 = 5
        operation = '+'
        result = calculator(num1, num2, operation)
        assert result == 15, "Failed to correctly perform addition operation"

    @pytest.mark.regression
    def test_calculator_subtraction(self):
        num1 = 10
        num2 = 5
        operation = '-'
        result = calculator(num1, num2, operation)
        assert result == 5, "Failed to correctly perform subtraction operation"

    @pytest.mark.regression
    def test_calculator_multiplication(self):
        num1 = 10
        num2 = 5
        operation = '*'
        result = calculator(num1, num2, operation)
        assert result == 50, "Failed to correctly perform multiplication operation"

    @pytest.mark.regression
    def test_calculator_division(self):
        num1 = 10
        num2 = 5
        operation = '/'
        result = calculator(num1, num2, operation)
        assert result == 2, "Failed to correctly perform division operation"

    @pytest.mark.negative
    def test_calculator_invalid_operation(self):
        num1 = 10
        num2 = 5
        operation = '%'
        result = calculator(num1, num2, operation)
        assert result == "Invalid operation", "Failed to return 'Invalid operation' for invalid operation"
